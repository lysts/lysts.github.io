<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>lysts - code</title><link href="https://lysts.xyz/" rel="alternate"></link><link href="https://lysts.xyz/feeds/code.atom.xml" rel="self"></link><id>https://lysts.xyz/</id><updated>2023-07-14T17:24:00+01:00</updated><entry><title>Introduction to Algorithms</title><link href="https://lysts.xyz/introduction-to-algorithms.html" rel="alternate"></link><published>2023-07-14T17:24:00+01:00</published><updated>2023-07-14T17:24:00+01:00</updated><author><name>lysts</name></author><id>tag:lysts.xyz,2023-07-14:/introduction-to-algorithms.html</id><summary type="html">&lt;p class="first last"&gt;notes on recorded introductory compsci lectures available at MIT OpenCourseWare&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title"&gt;Table of Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#l1-algorithms-computation" id="toc-entry-1"&gt;L1: Algorithms &amp;amp; Computation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#what-is-a-computational-problem" id="toc-entry-2"&gt;what is a computational problem?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#provide-deterministic-algorithm-to-find-answer" id="toc-entry-3"&gt;provide deterministic algorithm to find answer...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#use-induction-recursion-to-prove-correctness-of-algorithm" id="toc-entry-4"&gt;use induction &amp;amp; recursion to prove correctness of algorithm...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#prove-efficiency" id="toc-entry-5"&gt;prove efficiency...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#define-model-of-computation" id="toc-entry-6"&gt;define model of computation...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="l1-algorithms-computation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;L1: Algorithms &amp;amp; Computation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;communicating computational problem solving, its efficiency and correctness&lt;/p&gt;
&lt;div class="section" id="what-is-a-computational-problem"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;what is a computational problem?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;computational problems can have multiple correct outputs to an input
—› define a problem by specifying a predicate and observe output (binary)
—› can graph/map out&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="provide-deterministic-algorithm-to-find-answer"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;provide deterministic algorithm to find answer...&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;for general problems, algorithms can accept arbitrarily sized input, doesn't
map what a problem does. &amp;quot;Correctness&amp;quot; defined by whether output is correctly
given.&lt;/p&gt;
&lt;p&gt;f:I—›O
..
functional programming definition&lt;/p&gt;
&lt;p&gt;example: birthday problem!::
- maintain record
- check if birthday in record: - if so return pair, - add new student to record,
- return none&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-induction-recursion-to-prove-correctness-of-algorithm"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;use induction &amp;amp; recursion to prove correctness of algorithm...&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;inductive hypothesis = &amp;quot;if first &lt;tt class="docutils literal"&gt;k&lt;/tt&gt; students contain match, algorithm returns
match before interviewing student &lt;tt class="docutils literal"&gt;k+1&lt;/tt&gt;&amp;quot; = predicate
&lt;tt class="docutils literal"&gt;k&lt;/tt&gt; increases up to &lt;tt class="docutils literal"&gt;n&lt;/tt&gt;
base case: &lt;tt class="docutils literal"&gt;k=0&lt;/tt&gt; (case holds!)
assume IH true for &lt;tt class="docutils literal"&gt;k=k&lt;/tt&gt;'{- if k' contains match —› alreated returned by
induction, - else if &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;k'+1&lt;/span&gt;&lt;/tt&gt; contains match, alg &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;k'+1&lt;/span&gt;&lt;/tt&gt; against all students}&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="prove-efficiency"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-5"&gt;prove efficiency...&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;dont measure time, instead count fundamental operations (ops), expect performance to depend on (with respect to) size of our input (n) = how well algorithm performs, not how well it's implemented
O(.) upper bound, omega (.) lower bounds (theta) corresponds to both
asymptotic analysis***&lt;/p&gt;
&lt;p&gt;common algorithms that relate algorithm running time to input size
linear time algorithm efficiency from top to bottom:
''''''''''''''''''''''''''''''''''''''''''''''''''''&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;(theta)1 = constant time&lt;/li&gt;
&lt;li&gt;()lg n= logarithmic time&lt;/li&gt;
&lt;li&gt;()n = linear&lt;/li&gt;
&lt;li&gt;()n lg n= log n&lt;/li&gt;
&lt;li&gt;()n^2 = quadratic&lt;/li&gt;
&lt;li&gt;()n^c = polynomial (c for constant)&lt;/li&gt;
&lt;li&gt;2^(theta)n = exponential time, bad bc if plotted as function of n&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="processing time vs input size" src="images/processingtime.png" style="width: 600px;" /&gt;
&lt;p&gt;—&amp;gt; dnt want shit to go too high. exponential crap!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="define-model-of-computation"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-6"&gt;define model of computation...&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;word-RAM (RAM = random access memory, in constant time)
memory (string of bits), CPU where byte (chunk of bits = word) ex 64 bit
machine, to operate on to spit back, addressable memory 20 exabytes!! (data grabbed, registered separately, output also then registered then spat out)
ex can do integer arithmetic, logical ops (boolean etc), bitewise ops, on CPU memory&lt;/p&gt;
&lt;p&gt;if you want to operate on non-constant n, linear amount of data, how long will it take?
concerns data structures, store large amount of data and operate on that&lt;/p&gt;
&lt;img alt="algorithm list for solving computational problems" src="images/summaryL1.png" style="width: 600px;" /&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="code"></category><category term="algorithms"></category><category term="compsci"></category></entry><entry><title>my current set-up</title><link href="https://lysts.xyz/my-current-set-up.html" rel="alternate"></link><published>2023-07-11T18:02:00+01:00</published><updated>2023-07-11T18:02:00+01:00</updated><author><name>lysts</name></author><id>tag:lysts.xyz,2023-07-11:/my-current-set-up.html</id><content type="html">&lt;p&gt;iterm2, vim, tmux, ranger, - how i use these tools and how i've configured them
for simplicity and easy use&lt;/p&gt;
</content><category term="code"></category></entry></feed>