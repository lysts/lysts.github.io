<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>lysts - notes</title><link href="https://lysts.xyz/" rel="alternate"></link><link href="https://lysts.xyz/feeds/notes.atom.xml" rel="self"></link><id>https://lysts.xyz/</id><updated>2024-05-04T15:58:00+01:00</updated><entry><title>nom-noms</title><link href="https://lysts.xyz/nom-noms.html" rel="alternate"></link><published>2024-05-04T15:58:00+01:00</published><updated>2024-05-04T15:58:00+01:00</updated><author><name>lysts</name></author><id>tag:lysts.xyz,2024-05-04:/nom-noms.html</id><summary type="html">&lt;p class="first last"&gt;a list of homemade foods that have sparked joy in my life.&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title"&gt;&lt;a class="reference internal" href="#top"&gt;Table of Contents&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#preserved-lemons" id="toc-entry-1"&gt;Preserved Lemons&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#preparation" id="toc-entry-2"&gt;Preparation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#recommended-usage" id="toc-entry-3"&gt;Recommended Usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#earl-grey-chiffon-cake" id="toc-entry-4"&gt;Earl Grey Chiffon Cake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="preserved-lemons"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;Preserved Lemons&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This one, is an absolute gem to have in your fridge.
Grab as many lemons as you can, washed, with a sterilised preservation jug and its lid.&lt;/p&gt;
&lt;div class="section" id="preparation"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;Preparation&lt;/a&gt;&lt;/h3&gt;
&lt;img alt="parts of a lemon" src="images/lemonparts.png" style="width: 300px;" /&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Cut the lemon from the end with the remains of style, towards the pedicel, about 3/4 of the way, dividing the lemon into quarters. Image above, to help you navigate the complicated anatomy of a lemon.&lt;/li&gt;
&lt;li&gt;Shove salt generously between these lemon petals, making sure you get over teaspoons worth of salt wedged into each lemon.&lt;/li&gt;
&lt;li&gt;Stuff each lemon as you repeat this process, into the preservation jug with layers of salt. Press down vigorouly as you go.&lt;/li&gt;
&lt;li&gt;Good job. Once you wedged these lemons in nice and tight, we want this lemon orgy to be submerged within its own juices. Press!&lt;/li&gt;
&lt;li&gt;Lid this jug (you may require a beaded weight in a glass cup or miniature jar to keep the lemons submerged and lid on).&lt;/li&gt;
&lt;li&gt;Wait for a month, or until the skin is easily tearable and edible, with a deep citrus flavour and the saltiness of the sea.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="recommended-usage"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;Recommended Usage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some of my favourite ways to use preserved lemon is by...
* adding it to a heavy pasta, example: smoked salmon and spinach cream pasta, to add a tangy shot of freshness that cuts through the cream&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;similarly, adding it to sweet vegetable dishes. My absolute favourite was when my dear friend Felix made this excellent side dish with &lt;strong&gt;steamed golden beetroot&lt;/strong&gt;, topped with greek yoghurt, dill, and chopped preserved lemon. I have recreated this dish numerous times and found that creating an aleppo chilli sauce by Ottolenghi works quite well with this dish.&lt;/li&gt;
&lt;li&gt;alternatively, asian noodles with clear broth! and many more.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="earl-grey-chiffon-cake"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;Earl Grey Chiffon Cake&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Drier than pound cake and less sweet than sponge cake, its flavours are subtle and not at all overpowering. It invites you to add a dollop of freshly whipped cream (dairy or oat), and listen to flavours other than sweetness that seems to speak quite loudly despite its porous, light texture.
The earl grey flavour is perfect for this, with its bergamot oil notes accompanying the deeper flavours of the tanned skin of the cake.
Similarly, I would recommend having earl grey flavours in biscuits, with lemon zest icing (I know, I have been quite obsessed with lemon recently).&lt;/p&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="health"></category><category term="food"></category></entry><entry><title>becoming a software engineer</title><link href="https://lysts.xyz/my-career-journey.html" rel="alternate"></link><published>2023-10-15T18:42:00+01:00</published><updated>2023-10-15T18:42:00+01:00</updated><author><name>lysts</name></author><id>tag:lysts.xyz,2023-10-15:/my-career-journey.html</id><summary type="html">&lt;p class="first last"&gt;how I went from knowing nothing to just enough and more&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title"&gt;&lt;a class="reference internal" href="#top"&gt;Table of Contents&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#my-journey-so-far" id="toc-entry-1"&gt;my journey so far&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#re-working-my-workflow" id="toc-entry-2"&gt;re-working my workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#i-built-my-website" id="toc-entry-3"&gt;I built my website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#job-hunting" id="toc-entry-4"&gt;Job hunting?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pursuing-software-development" id="toc-entry-5"&gt;Pursuing software development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-process" id="toc-entry-6"&gt;The process&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="my-journey-so-far"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;my journey so far&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I wrote a lot of R during my degree for data science projects, specifically for statistical analysis and data visualisation. Due to Python and MATLAB being the primary languages the lab I worked for used in their research, I quickly learned just enough Python to help me write scripts for my project and the neuronal data analysis pipelin we used. My workflow, though performed entirely in terminal, was reliant on lunarvim and oh my zsh, which were both immensely useful but wasn't well optimised and took up lots of storage. Installing everything at once also meant that I wasn't able to fully understand useful vim editing shortcuts, as well as the dependencies, plugins, and additional features.&lt;/p&gt;
&lt;p&gt;Thus, it never really felt like I knew how to &lt;em&gt;program&lt;/em&gt;. Everything  I required a LOT more learning, such as algorithms and important concepts that I would otherwise be fed via a computer science degree. My problem solving skils were limited to the needs of data science and the lab itself, so when addressing any question, any task I wanted to accomplish through code, I lacked the skillset to carry it out, even if I was able to come up with a solution.&lt;/p&gt;
&lt;div class="section" id="re-working-my-workflow"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;re-working my workflow&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I uninstalled oh my zsh and decided to customise my terminal from scratch, going through zshrc config documentation. I set up ranger as my file navigation system and vim as my text editor alomg with its native plugin manager to manage the essential plugins. This helped me learn how files are stored, as well as properly re-learn the shortcuts and commands I need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-built-my-website"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;I built my website&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Though Notion served me well for note-taking and keeping track of my progress, I needed a place to keep track of anything programming and life-related so I decided to build my own website... From scratch. This took me a while, reading and reading through documentation for GitHub pages, Pelican, and html and css â€” resources that allows me to build everything from my terminal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="job-hunting"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;Job hunting?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I tried to look for paid opportunities where I would be able to learn more programming on the job. I thought I knew what I wanted to do and learn, but later realised that my scope was too broad; I was originally searching for both data science and software engineering. Data science, being something I'm more familiar with, I easily felt more competent and comfortable with the idea of pursuing programming in that field. I did pass a number of successful interview stages, but towards the end of each process, realised that the jobs weren't the right fit for me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pursuing-software-development"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-5"&gt;Pursuing software development&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is when I started to focus more on software, learning about job specialities, what I enjoy, and what I want to learn. I found roadmaps to help me see the general picture of what these jobs entail and what I need to focus on. This brings me to the present as I write this.&lt;/p&gt;
&lt;p&gt;I wanted to deeply learn Python but also pick up Javascript and Typescript as I have an interest in front-end. I finished a Javascript fundamentals course, and began another to help me use what I've learned in a more practical setting. I still need to establish a good Python practice, and also began a full-stack project where my goal is to develop a desktop app.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-process"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-6"&gt;The process&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Steps:
1. focus on learning programming languages
2. learn fundamental concepts and practice problem solving
3. practice is where it all starts; test your learning
4. work on a project to aid your learning
4. use tools that will improve your workflow
5. get feedback, ideally mentorship
6. apply for jobs that have a suitable learning environment&lt;/p&gt;
&lt;p&gt;It's important to remember to:
- keep a consistent and productive routine
- review your curriculum and your goals before each session
- productive also means that you're taking adequate and frequent breaks&lt;/p&gt;
&lt;p&gt;Funnily enough, I ticked some of these steps off, like learning terminal workflow and such, beginning a project, and beginning more detailed skill building with Javascript and bursts of practice with Python, although this all occurred in quite a peculiar order of events. The goal is to refine what I'm already doing, incorporate what I need to get even more on track, and persevere.&lt;/p&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="career"></category><category term="software"></category><category term="programming"></category></entry><entry><title>good software architect practices</title><link href="https://lysts.xyz/software-architect.html" rel="alternate"></link><published>2023-10-09T11:49:00+01:00</published><updated>2023-10-09T11:49:00+01:00</updated><author><name>lysts</name></author><id>tag:lysts.xyz,2023-10-09:/software-architect.html</id><summary type="html">&lt;p class="first last"&gt;notes on software architecture, based on roadmap.sh&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title"&gt;&lt;a class="reference internal" href="#top"&gt;Table of Contents&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#software-architecture-practices" id="toc-entry-1"&gt;software architecture practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#levels-of-architecture" id="toc-entry-2"&gt;levels of architecture&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#krucheten-s-4-1-model" id="toc-entry-3"&gt;Krucheten's 4+1 Model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#unified-modeling-language" id="toc-entry-4"&gt;Unified Modeling Language&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#component-diagrams" id="toc-entry-5"&gt;Component Diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#class-diagrams" id="toc-entry-6"&gt;Class Diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#activity-diagrams" id="toc-entry-7"&gt;Activity Diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#deployment-diagrams" id="toc-entry-8"&gt;Deployment Diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#use-case-diagram" id="toc-entry-9"&gt;Use Case Diagram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#software-architecture-patterns" id="toc-entry-10"&gt;Software Architecture Patterns&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#event-driven-architecture" id="toc-entry-11"&gt;Event-driven architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#programming" id="toc-entry-12"&gt;Programming&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#skills" id="toc-entry-13"&gt;Skills&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#documentation" id="toc-entry-14"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Software architects&lt;/tt&gt; design software solutions with high-level decisions from ground up, concerning the tools, platforms, etc that are used, leading engineers in creating the final product (like with full-stack development).&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Software architecture&lt;/tt&gt; is concerned with context:
1. functional requirements (what should the system do?)
2. non-functional requirements (functionality, reliability, usability, efficiency, maintainability, scalability)
3. restrictions (legal requirements, standards, cost, time-to-market, talent hiring)&lt;/p&gt;
&lt;p&gt;Mapping software architecture out allows you to identify potential problem areas ahead of time, but also means that it's vital and a risk to the trajectory of a project.&lt;/p&gt;
&lt;div class="section" id="software-architecture-practices"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;software architecture practices&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;keeping documentation of all aspects of architectural design and their interrelationships with other aspects of the projects (including their expected goals/functions)&lt;/li&gt;
&lt;li&gt;regular checkup system to re-evaluate architecture, whether they achieve purpose, and whether the system itself conforms to the intended architecture type&lt;/li&gt;
&lt;li&gt;extra systems at every stage of the architecture to maintain quality assurance of the system's tasks, goals, and outputs&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="levels-of-architecture"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;levels of architecture&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;application level = detailed and lowest level design, focused on one single application, communication within one dev team&lt;/li&gt;
&lt;li&gt;solution level = some high but mainly low-level design. Focus on one/more application(s) that fulfill business needs, with communication between multiple dev teams&lt;/li&gt;
&lt;li&gt;enterprise level = highest level of architecture, focused on multiple solutions. High level design requiring application architects, with communication across organisation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="krucheten-s-4-1-model"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;Krucheten's 4+1 Model&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;describes architecture of software-based systems, allows us to describe system from perspective of different stakeholders. The development (programmer's perspective, focused on software management and domain UML diagrams), logical (functionality provided to end users and system behaviours), physical (topology/distribution of software effects on physical layer and their interconnectivity), and process (communication/control flow concurrency/data flow across system processes) views, with the plus one scenarios (use cases to start off system testing, verify that system meets stakeholder requirements).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="unified-modeling-language"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;Unified Modeling Language&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;UML&lt;/tt&gt; is commonly used standardised modeling language used to provide visually representation notation of software system design and structure. It describes the static system structure through object attributes and relationships as well as diagrams that show object collaboration and state changes which illustrate the dynamic behaviour of the system. A subset of behaviour diagrams are interaction diagrams which focuses on the flow of control and data as sequence or communication diagrams. (to create UMLs, &lt;tt class="docutils literal"&gt;Lucidchart&lt;/tt&gt; recommended)&lt;/p&gt;
&lt;div class="section" id="component-diagrams"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-5"&gt;Component Diagrams&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;component = module of classes that serve a common purpose, giving bird's eye view of system components and how they relate/what purpose they serve. Circle components provide the interface for 2 components to interact, with arrows (with/without arrowheads) specify relationships.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="class-diagrams"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-6"&gt;Class Diagrams&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;structural diagram modelling classes in a system showing relationships between each class object which is filled with data, split into 3 sections: their name, attributes, and operations. Bidirectional relationships are indicated by arrowhead-less lines. Levels of multiplicity between classes are indicated by numbers (example: one/multiple bookings vs max one customer). Class inheritance is shown by a special arrowhead (empty arrowheads).
- plus signs indicate public attribute operations
- minuses indicate private (access modifier)
- hash symbols indicates that the attribute/operation is protected
- underline shows that it is static&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="activity-diagrams"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-7"&gt;Activity Diagrams&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;describes dynamic behaviour modelling control flow between activities:
1. start node = starting point of activity
2. state object in which behaviour of object represented described
3. certain condition satisfaction decides decision node with multiple possible control laws
4. end node
Horizontal fork/join represents concurrent control laws (one in, many out). Synchronisation object would have multiple slows coming in and one/more control systems going out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deployment-diagrams"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-8"&gt;Deployment Diagrams&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;models physical deployment of software artifacts, showing hardware components, what software runs on each node, and how they are interconnected. Each node can represent a hardware/software object (connected by lines without arrowheads), act as containers to hold other node objects. Component objects represent element of software on client machine. Interfaces shown for communication between application and business layers. Dependencies between components and software artifacts (ex application layer linked to data access layer) shown using dashed line and arrowhead for direction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-case-diagram"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-9"&gt;Use Case Diagram&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;models users of system (actors), and their interaction with the system, helping to define functional requirements. Use cases are defined by oval object, described inside.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="software-architecture-patterns"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-10"&gt;Software Architecture Patterns&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are a variety of software architecture structures example:
Layered pattern architecture
''''''''''''''''''''''''''''
Or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Multi-Tiered&lt;/span&gt; Architecture&lt;/tt&gt; is a database-driven architecture where data begins at the top layer and works its way down until it reaches the infrastructure layer, typically a database.&lt;/p&gt;
&lt;div class="section" id="event-driven-architecture"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-11"&gt;Event-driven architecture&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;sometimes programs wait till event occurs; sometimes data will need to be processed and sometimes not. Central unit (event service bus) processes data before delegating to relevant modules) â€” super useful in complex environments but can be difficult when error handling if modules handling same events.&lt;/p&gt;
&lt;p&gt;Apart from knowing patterns, knowing quality measures, understanding and using different tech stacks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="programming"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-12"&gt;Programming&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Recommended books for programming knowledge:
- Experience &amp;amp; Knowledge Management in Software Engineering by Kurt Schneider.
- Clean Code by Robert C. Martin
Also, Technology Radar from thoughtworks provides categorised insight on tools, techniques, platforms, languages, frameworks.&lt;/p&gt;
&lt;div class="section" id="skills"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-13"&gt;Skills&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;understanding of web applications, cybersecurity, open source technologies&lt;/li&gt;
&lt;li&gt;experience with database platforms, analysing code for issues/errors, operations &amp;amp; DevOps skills&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-14"&gt;Documentation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Generate documentation where possible, but as much as necessary, as little as possible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="software"></category></entry><entry><title>newb to code... and to climbing</title><link href="https://lysts.xyz/keeping-active.html" rel="alternate"></link><published>2023-07-30T19:01:00+01:00</published><updated>2023-07-30T19:01:00+01:00</updated><author><name>lysts</name></author><id>tag:lysts.xyz,2023-07-30:/keeping-active.html</id><summary type="html">&lt;p class="first last"&gt;keeping active, challenging a new sport, how it plays into my journey
with programming&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title"&gt;&lt;a class="reference internal" href="#top"&gt;Table of Contents&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#to-be-spent-and-to-be-protected" id="toc-entry-1"&gt;To be spent and to be protected&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#mobility-habits-of-choice" id="toc-entry-2"&gt;Mobility habits of choice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-recent-addition" id="toc-entry-3"&gt;The recent addition!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#mobility-habits-code" id="toc-entry-4"&gt;Mobility Habits &amp;amp; Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="to-be-spent-and-to-be-protected"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;To be spent and to be protected&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Health. It's pretty easy to fall into the habit of taking our health for granted
(guilty as charged)... Getting into healthy habits takes time and we
often put it off pointing out that lonely piece of pizza, losing heat at the
intersection of four relatively hungry friends.&lt;/p&gt;
&lt;p&gt;Though blatantly obvious, it's sometimes difficult to remind ourselves of the
beautifully refreshing and invigorating euphoria feels exercise grants us. Not only
that, but improved physical and mental strength, like when you climb up a
flight of stairs and realise that core strengthening exercises are really paying
off.&lt;/p&gt;
&lt;p&gt;How much exercise is too much? How much is sustainable? How much do we actually need? What ruins us and what doesn't?
Here are my tokens from testing a few different habits:&lt;/p&gt;
&lt;div class="section" id="mobility-habits-of-choice"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;Mobility habits of choice&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;1. Yoga
This has been a constant hell yes in my repertoire. What I love about it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;requires just a mat, some space, and you of course&lt;/li&gt;
&lt;li&gt;take it outdoors or indoors&lt;/li&gt;
&lt;li&gt;make it solo or social&lt;/li&gt;
&lt;li&gt;plethora of moves, flows, variations&lt;/li&gt;
&lt;li&gt;decompresses, twists, challenges and relaxes the body&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus, you can identify your needs, chop up a sequence, stich em up together by choice
and there you go, your perfect regimen.&lt;/p&gt;
&lt;p&gt;Ease into building mind-to-muscle connections with intention. A simple flow can
help you stretch and awaken muscles throughout your entire body in your
mornings. A more intense session can make you sweat, really engage your
core, build muscle anywhere you desire, and improve your flexiibility,
simultaneously.&lt;/p&gt;
&lt;p&gt;2. Pilates
I see this as an extension of yoga, where you...:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;take those muscles and really target them&lt;/li&gt;
&lt;li&gt;core building. yes, it can burn (good burns)&lt;/li&gt;
&lt;li&gt;evokes a good sweat&lt;/li&gt;
&lt;li&gt;again, you only really need a mat, some space, and you&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- FORM is crucial in both practices so practice attentiveness to where
your limbs are placed, movements, and your posture --&gt;
&lt;p&gt;3. Running
This is perhaps more commercial so I won't delve but I suppose I'll touch on
some struggles I've had to leave some pointers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;not pacing myself properly â€”â€º start small, even if it feels easy&lt;/li&gt;
&lt;li&gt;long-term consistency â€”â€º timeblock in your schedule, find a friend to run with&lt;/li&gt;
&lt;li&gt;post-exercise coughing â€”â€º keep walking outside whilst you cool down (avoid sitting straight down in a badly ventilated indoor space)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;Tennis &amp;amp; Football:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;stress relieving&lt;/li&gt;
&lt;li&gt;satisfying to smash/kick a ball&lt;/li&gt;
&lt;li&gt;game element, strategy&lt;/li&gt;
&lt;li&gt;involves both running and staying still, mix of stillness and running&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've oftentimes enjoyed such sport after a long day of work, or at the end
of the week on weekends. It can be rewarding to practice precision, the types of ways you can serve or return the ball to achieve a
pre-determined trajectory or tactic. It really works your arms and legs and
reflexiveness.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-recent-addition"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;The recent addition!&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;5. Climbing (bouldering)
So far, each time I've climbed, I've gone with an experienced climber. Each time,
I have noticed that they move with smoothness and reduced inefficient movement
and tension. It's mesmerising to watch, and I've come to appreciate the sport
as an art form.&lt;/p&gt;
&lt;p&gt;It may be one of the most challenging sports I've ever done. Don't be
deceived by the height of the walls that only seem to last a few meters...
There are varying levels of difficulty for every climber. Quick overview:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;bouldering walls have colour coded grips that belong to different paths of distinguished levels. Start hands are often labelled for you&lt;/li&gt;
&lt;li&gt;once you reach the top and final grip, both hands must meet the grip together&lt;/li&gt;
&lt;li&gt;you can use any grip from any path on the way down, or jump from a reasonable
height (don't worry, the floor is well cushioned...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The sport gets you out of your comfort zone, testing your grip, toes, agility,
back and arms â€” practically everything. It requires a lot of planning and
strategy, and at times trial and error to figure out different paths.&lt;/p&gt;
&lt;p&gt;With it, your mental strength and stamina are put to the test.&lt;/p&gt;
&lt;p&gt;It can be discouraging when you can't make it to the top in one go (a &amp;quot;flash&amp;quot;).
You may feel vulnerable, &amp;quot;failing&amp;quot; in front of other observing climbers.
Whilst you're climbing, you may panic due to the sheer height, tense up, or feel like your arms are giving out.&lt;/p&gt;
&lt;p&gt;But learning that...:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;there's no time limit. Take your time solving a path, or move on to others&lt;/li&gt;
&lt;li&gt;it's okay to turn back and fall, you can always try again, today or another day&lt;/li&gt;
&lt;li&gt;other climbers are always friendly, non-judgemental, and willing to help&lt;/li&gt;
&lt;li&gt;this becomes good practice of failure, challenging and believing in yourself&lt;/li&gt;
&lt;li&gt;perseverance becomes resilience â€” you become less fear-ridden with time&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;has honestly led to immense self-growth in a short amount of time:):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Just yesterday, I went climbing, and felt proud of myself when I managed to clear
a path I thought I wouldn't manage. I felt stuck 80% of the way up and had to rest
about 3-4 meters above ground due to muscle fatigue.
But after giving myself a moment, I pushed myself up to the last grip. And boy,
was it undeniably satisfying.
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="mobility-habits-code"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;Mobility Habits &amp;amp; Code&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With programming, you always meet a multitude of debugging issues. Just like a grip that may
have been out of sight, you may have missed something so blatantly obvious.&lt;/p&gt;
&lt;p&gt;It may be frustrating (in my case, I end up hysterically laughing). It's
discouraging when things don't quite work. But similarly to yoga and climbing,
you make attempts, you see improvement, you reach higher and you push yourself
incrementally. The way you address problem solving may become more precise and
efficient as you unlock thought processes and improve the quality of your code.&lt;/p&gt;
&lt;p&gt;Sometimes, simple code is the best code. You don't want to overcomplicate or
overwork your muscle movements, you want them to support your objectives.
Similarly, your code should be there to help you accomplish your goals, not
diminish them.&lt;/p&gt;
&lt;p&gt;These habits have and hopefully will continue to feed in to my journey with
programming in a symbiotic manner. Timeblocking periods of exercise into my
schedule has improved my concentration and sleep quality, and diminished that
mental block to simply do things and get things done.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="health"></category><category term="mind"></category><category term="sport"></category></entry><entry><title>setting up github actions for pelican</title><link href="https://lysts.xyz/github-actions-pelican.html" rel="alternate"></link><published>2023-07-08T11:00:00+01:00</published><updated>2023-07-08T11:00:00+01:00</updated><author><name>lysts</name></author><id>tag:lysts.xyz,2023-07-08:/github-actions-pelican.html</id><summary type="html">&lt;p class="first last"&gt;web-building with github actions and pelican&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The first attempt was to try and make a yml file to do github actions.&lt;/p&gt;
</content><category term="notes"></category><category term="github"></category></entry></feed>