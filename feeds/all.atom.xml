<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>lysts</title><link href="https://lysts.xyz/" rel="alternate"></link><link href="https://lysts.xyz/feeds/all.atom.xml" rel="self"></link><id>https://lysts.xyz/</id><updated>2024-05-04T17:04:00+01:00</updated><entry><title>notable multimedia</title><link href="https://lysts.xyz/media.html" rel="alternate"></link><published>2024-05-04T17:04:00+01:00</published><updated>2024-05-04T17:04:00+01:00</updated><author><name>lysts</name></author><id>tag:lysts.xyz,2024-05-04:/media.html</id><summary type="html">&lt;p class="first last"&gt;thought-provoking multimedia&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title"&gt;&lt;a class="reference internal" href="#top"&gt;Table of Contents&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#art" id="toc-entry-1"&gt;Art&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#objects" id="toc-entry-2"&gt;Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#modern-composers" id="toc-entry-3"&gt;Modern Composers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#albums-that-ascend" id="toc-entry-4"&gt;Albums that Ascend!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#films" id="toc-entry-5"&gt;Films&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="art"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;Art&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;John Singer Sargant - &amp;quot;Carnation, Lily, Lily, Rose&amp;quot; 1887&lt;/li&gt;
&lt;li&gt;Joseph Mallord William Turner - &amp;quot;Rain, Steam, and Speed&amp;quot; 1844, Interior of Tintern Abbey Monmouthshire 1794&lt;/li&gt;
&lt;li&gt;Owen Gent - Icarus (Based on song, Icarus, written by Anne Lister, performed by Nic Jones) 2017&lt;/li&gt;
&lt;li&gt;Andrea Serio - colour pencil illustrations&lt;/li&gt;
&lt;li&gt;Jef Bourgeau - 1950 landscapes&lt;/li&gt;
&lt;li&gt;Tony Meeuwissen - playing cards&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="objects"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;Objects&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Kinto water bottles: texture feels like climbing holds, satisfying to grasp with a uniform, simplistic interesting outer design. Lightweight and holds hot and cold beverages.&lt;/li&gt;
&lt;li&gt;supatto bags: conveniently folded like origami into compact shape but durable and holds heavy groceries or clothes when unravelled&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="modern-composers"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;Modern Composers&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Caroline Shaw - string quartet and room of teeth works&lt;/li&gt;
&lt;li&gt;Ben Nobuto - multi-instrumentalist, composer, and performer&lt;/li&gt;
&lt;li&gt;Steve Reich - contemporary classical&lt;/li&gt;
&lt;li&gt;Colin Stetson - saxophonist&lt;/li&gt;
&lt;li&gt;Tigram Hamasyan - Armenian jazz fusion composer&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="albums-that-ascend"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;Albums that Ascend!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;(artist - albumn name)
* Avalanches - Since I Left You
* Steve Reich - Electric Counterpoint
* Caroline Shaw - Orange
* Fabio Caramuru - Ecomusica: Conversas de um Piano Com a Fauna Brasileira
* Three Trapped Tigers - Numbers: 1-13
* Tigran Hamasyan - For Gyumri
* Paranoid Void - Literary Math
* Il Giardino Armonico - The Collected Recordings of Il Giardino Armonico
* Snarky Puppy - We Like it Here
* Hiatus Kaiyote - Tawk Tomohawk
* Yussef Dayes - The Yussef Dayes Experience Live from Malibu
* Sweet Trip - Velocity: Design: Comfort.
* Linkin Park - Reanimation
* And So I Watch You from Afar - The Endless Shimmering
* VOCES8 - Lux
* Danish String Quartet - Last Leaf
* Bon Iver - i,i
* Keith Jarrett - The Melody At Night, With You
* Fleet Foxes - Fleet Foxes
* Hilary Hahn - Silfra
* Bulgarian Voices Angelite - Legend
* CAPSULE - NEXUS-2060&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="films"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-5"&gt;Films&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Poor Things&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;encapsulates the beauty of being unapologetically oneself, as well as conventional societal &amp;quot;norms&amp;quot; and how they affect our behaviour.&lt;/li&gt;
&lt;li&gt;watched early 2024&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Pig&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;poetic, quiet in dialogue but beautifully shot and emotionally gripping.&lt;/li&gt;
&lt;li&gt;watch as Nicholas Cage desperately tries to reunite with his truffle pig.&lt;/li&gt;
&lt;li&gt;watched summer 2022.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;12 Angry Men&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;a powerful film about social justice&lt;/li&gt;
&lt;li&gt;90% of this film, was set in one room&lt;/li&gt;
&lt;li&gt;black and white film that truly captures the dangers of human bias, discrimmination, and lack of critical thinking in something as life-changing as imprisonment.&lt;/li&gt;
&lt;li&gt;one man questions the truth, against 11 men&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Women Talking&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;as an AFAB human, I resonated with the pain and anger the women in the film experienced, albeit their society being more heavily burdened by mysoginistic men and the expectations, rules, and restrictions that they have imposed on their lifestyle and life choices.&lt;/li&gt;
&lt;li&gt;set mostly in a barn where women and children of a small community in the USA, open up about the atrocities they have experienced throughout their lifetimes as they are left with little time and space to decide whether or not to part with their home for freedom.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="movies"></category><category term="books"></category><category term="music"></category><category term="art"></category><category term="objects"></category></entry><entry><title>nom-noms</title><link href="https://lysts.xyz/nom-noms.html" rel="alternate"></link><published>2024-05-04T15:58:00+01:00</published><updated>2024-05-04T15:58:00+01:00</updated><author><name>lysts</name></author><id>tag:lysts.xyz,2024-05-04:/nom-noms.html</id><summary type="html">&lt;p class="first last"&gt;a list of homemade foods that have sparked joy in my life.&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title"&gt;&lt;a class="reference internal" href="#top"&gt;Table of Contents&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#preserved-lemons" id="toc-entry-1"&gt;Preserved Lemons&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#preparation" id="toc-entry-2"&gt;Preparation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#recommended-usage" id="toc-entry-3"&gt;Recommended Usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#earl-grey-chiffon-cake" id="toc-entry-4"&gt;Earl Grey Chiffon Cake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="preserved-lemons"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;Preserved Lemons&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This one, is an absolute gem to have in your fridge.
Grab as many lemons as you can, washed, with a sterilised preservation jug and its lid.&lt;/p&gt;
&lt;div class="section" id="preparation"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;Preparation&lt;/a&gt;&lt;/h3&gt;
&lt;img alt="parts of a lemon" src="images/lemonparts.png" style="width: 300px;" /&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Cut the lemon from the end with the remains of style, towards the pedicel, about 3/4 of the way, dividing the lemon into quarters. Image above, to help you navigate the complicated anatomy of a lemon.&lt;/li&gt;
&lt;li&gt;Shove salt generously between these lemon petals, making sure you get over teaspoons worth of salt wedged into each lemon.&lt;/li&gt;
&lt;li&gt;Stuff each lemon as you repeat this process, into the preservation jug with layers of salt. Press down vigorouly as you go.&lt;/li&gt;
&lt;li&gt;Good job. Once you wedged these lemons in nice and tight, we want this lemon orgy to be submerged within its own juices. Press!&lt;/li&gt;
&lt;li&gt;Lid this jug (you may require a beaded weight in a glass cup or miniature jar to keep the lemons submerged and lid on).&lt;/li&gt;
&lt;li&gt;Wait for a month, or until the skin is easily tearable and edible, with a deep citrus flavour and the saltiness of the sea.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="recommended-usage"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;Recommended Usage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Some of my favourite ways to use preserved lemon is by...
* adding it to a heavy pasta, example: smoked salmon and spinach cream pasta, to add a tangy shot of freshness that cuts through the cream&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;similarly, adding it to sweet vegetable dishes. My absolute favourite was when my dear friend Felix made this excellent side dish with &lt;strong&gt;steamed golden beetroot&lt;/strong&gt;, topped with greek yoghurt, dill, and chopped preserved lemon. I have recreated this dish numerous times and found that creating an aleppo chilli sauce by Ottolenghi works quite well with this dish.&lt;/li&gt;
&lt;li&gt;alternatively, asian noodles with clear broth! and many more.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="earl-grey-chiffon-cake"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;Earl Grey Chiffon Cake&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Drier than pound cake and less sweet than sponge cake, its flavours are subtle and not at all overpowering. It invites you to add a dollop of freshly whipped cream (dairy or oat), and listen to flavours other than sweetness that seems to speak quite loudly despite its porous, light texture.
The earl grey flavour is perfect for this, with its bergamot oil notes accompanying the deeper flavours of the tanned skin of the cake.
Similarly, I would recommend having earl grey flavours in biscuits, with lemon zest icing (I know, I have been quite obsessed with lemon recently).&lt;/p&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="health"></category><category term="food"></category></entry><entry><title>becoming a software engineer</title><link href="https://lysts.xyz/my-career-journey.html" rel="alternate"></link><published>2023-10-15T18:42:00+01:00</published><updated>2023-10-15T18:42:00+01:00</updated><author><name>lysts</name></author><id>tag:lysts.xyz,2023-10-15:/my-career-journey.html</id><summary type="html">&lt;p class="first last"&gt;how I went from knowing nothing to just enough and more&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title"&gt;&lt;a class="reference internal" href="#top"&gt;Table of Contents&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#my-journey-so-far" id="toc-entry-1"&gt;my journey so far&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#re-working-my-workflow" id="toc-entry-2"&gt;re-working my workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#i-built-my-website" id="toc-entry-3"&gt;I built my website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#job-hunting" id="toc-entry-4"&gt;Job hunting?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#pursuing-software-development" id="toc-entry-5"&gt;Pursuing software development&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#the-process" id="toc-entry-6"&gt;The process&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="my-journey-so-far"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;my journey so far&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I wrote a lot of R during my degree for data science projects, specifically for statistical analysis and data visualisation. Due to Python and MATLAB being the primary languages the lab I worked for used in their research, I quickly learned just enough Python to help me write scripts for my project and the neuronal data analysis pipelin we used. My workflow, though performed entirely in terminal, was reliant on lunarvim and oh my zsh, which were both immensely useful but wasn't well optimised and took up lots of storage. Installing everything at once also meant that I wasn't able to fully understand useful vim editing shortcuts, as well as the dependencies, plugins, and additional features.&lt;/p&gt;
&lt;p&gt;Thus, it never really felt like I knew how to &lt;em&gt;program&lt;/em&gt;. Everything  I required a LOT more learning, such as algorithms and important concepts that I would otherwise be fed via a computer science degree. My problem solving skils were limited to the needs of data science and the lab itself, so when addressing any question, any task I wanted to accomplish through code, I lacked the skillset to carry it out, even if I was able to come up with a solution.&lt;/p&gt;
&lt;div class="section" id="re-working-my-workflow"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;re-working my workflow&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I uninstalled oh my zsh and decided to customise my terminal from scratch, going through zshrc config documentation. I set up ranger as my file navigation system and vim as my text editor alomg with its native plugin manager to manage the essential plugins. This helped me learn how files are stored, as well as properly re-learn the shortcuts and commands I need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="i-built-my-website"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;I built my website&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Though Notion served me well for note-taking and keeping track of my progress, I needed a place to keep track of anything programming and life-related so I decided to build my own website... From scratch. This took me a while, reading and reading through documentation for GitHub pages, Pelican, and html and css — resources that allows me to build everything from my terminal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="job-hunting"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;Job hunting?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I tried to look for paid opportunities where I would be able to learn more programming on the job. I thought I knew what I wanted to do and learn, but later realised that my scope was too broad; I was originally searching for both data science and software engineering. Data science, being something I'm more familiar with, I easily felt more competent and comfortable with the idea of pursuing programming in that field. I did pass a number of successful interview stages, but towards the end of each process, realised that the jobs weren't the right fit for me.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pursuing-software-development"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-5"&gt;Pursuing software development&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is when I started to focus more on software, learning about job specialities, what I enjoy, and what I want to learn. I found roadmaps to help me see the general picture of what these jobs entail and what I need to focus on. This brings me to the present as I write this.&lt;/p&gt;
&lt;p&gt;I wanted to deeply learn Python but also pick up Javascript and Typescript as I have an interest in front-end. I finished a Javascript fundamentals course, and began another to help me use what I've learned in a more practical setting. I still need to establish a good Python practice, and also began a full-stack project where my goal is to develop a desktop app.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-process"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-6"&gt;The process&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Steps:
1. focus on learning programming languages
2. learn fundamental concepts and practice problem solving
3. practice is where it all starts; test your learning
4. work on a project to aid your learning
4. use tools that will improve your workflow
5. get feedback, ideally mentorship
6. apply for jobs that have a suitable learning environment&lt;/p&gt;
&lt;p&gt;It's important to remember to:
- keep a consistent and productive routine
- review your curriculum and your goals before each session
- productive also means that you're taking adequate and frequent breaks&lt;/p&gt;
&lt;p&gt;Funnily enough, I ticked some of these steps off, like learning terminal workflow and such, beginning a project, and beginning more detailed skill building with Javascript and bursts of practice with Python, although this all occurred in quite a peculiar order of events. The goal is to refine what I'm already doing, incorporate what I need to get even more on track, and persevere.&lt;/p&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="career"></category><category term="software"></category><category term="programming"></category></entry><entry><title>good software architect practices</title><link href="https://lysts.xyz/software-architect.html" rel="alternate"></link><published>2023-10-09T11:49:00+01:00</published><updated>2023-10-09T11:49:00+01:00</updated><author><name>lysts</name></author><id>tag:lysts.xyz,2023-10-09:/software-architect.html</id><summary type="html">&lt;p class="first last"&gt;notes on software architecture, based on roadmap.sh&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title"&gt;&lt;a class="reference internal" href="#top"&gt;Table of Contents&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#software-architecture-practices" id="toc-entry-1"&gt;software architecture practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#levels-of-architecture" id="toc-entry-2"&gt;levels of architecture&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#krucheten-s-4-1-model" id="toc-entry-3"&gt;Krucheten's 4+1 Model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#unified-modeling-language" id="toc-entry-4"&gt;Unified Modeling Language&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#component-diagrams" id="toc-entry-5"&gt;Component Diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#class-diagrams" id="toc-entry-6"&gt;Class Diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#activity-diagrams" id="toc-entry-7"&gt;Activity Diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#deployment-diagrams" id="toc-entry-8"&gt;Deployment Diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#use-case-diagram" id="toc-entry-9"&gt;Use Case Diagram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#software-architecture-patterns" id="toc-entry-10"&gt;Software Architecture Patterns&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#event-driven-architecture" id="toc-entry-11"&gt;Event-driven architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#programming" id="toc-entry-12"&gt;Programming&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#skills" id="toc-entry-13"&gt;Skills&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#documentation" id="toc-entry-14"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Software architects&lt;/tt&gt; design software solutions with high-level decisions from ground up, concerning the tools, platforms, etc that are used, leading engineers in creating the final product (like with full-stack development).&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Software architecture&lt;/tt&gt; is concerned with context:
1. functional requirements (what should the system do?)
2. non-functional requirements (functionality, reliability, usability, efficiency, maintainability, scalability)
3. restrictions (legal requirements, standards, cost, time-to-market, talent hiring)&lt;/p&gt;
&lt;p&gt;Mapping software architecture out allows you to identify potential problem areas ahead of time, but also means that it's vital and a risk to the trajectory of a project.&lt;/p&gt;
&lt;div class="section" id="software-architecture-practices"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;software architecture practices&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;keeping documentation of all aspects of architectural design and their interrelationships with other aspects of the projects (including their expected goals/functions)&lt;/li&gt;
&lt;li&gt;regular checkup system to re-evaluate architecture, whether they achieve purpose, and whether the system itself conforms to the intended architecture type&lt;/li&gt;
&lt;li&gt;extra systems at every stage of the architecture to maintain quality assurance of the system's tasks, goals, and outputs&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="levels-of-architecture"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;levels of architecture&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;application level = detailed and lowest level design, focused on one single application, communication within one dev team&lt;/li&gt;
&lt;li&gt;solution level = some high but mainly low-level design. Focus on one/more application(s) that fulfill business needs, with communication between multiple dev teams&lt;/li&gt;
&lt;li&gt;enterprise level = highest level of architecture, focused on multiple solutions. High level design requiring application architects, with communication across organisation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="krucheten-s-4-1-model"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;Krucheten's 4+1 Model&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;describes architecture of software-based systems, allows us to describe system from perspective of different stakeholders. The development (programmer's perspective, focused on software management and domain UML diagrams), logical (functionality provided to end users and system behaviours), physical (topology/distribution of software effects on physical layer and their interconnectivity), and process (communication/control flow concurrency/data flow across system processes) views, with the plus one scenarios (use cases to start off system testing, verify that system meets stakeholder requirements).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="unified-modeling-language"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;Unified Modeling Language&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;UML&lt;/tt&gt; is commonly used standardised modeling language used to provide visually representation notation of software system design and structure. It describes the static system structure through object attributes and relationships as well as diagrams that show object collaboration and state changes which illustrate the dynamic behaviour of the system. A subset of behaviour diagrams are interaction diagrams which focuses on the flow of control and data as sequence or communication diagrams. (to create UMLs, &lt;tt class="docutils literal"&gt;Lucidchart&lt;/tt&gt; recommended)&lt;/p&gt;
&lt;div class="section" id="component-diagrams"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-5"&gt;Component Diagrams&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;component = module of classes that serve a common purpose, giving bird's eye view of system components and how they relate/what purpose they serve. Circle components provide the interface for 2 components to interact, with arrows (with/without arrowheads) specify relationships.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="class-diagrams"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-6"&gt;Class Diagrams&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;structural diagram modelling classes in a system showing relationships between each class object which is filled with data, split into 3 sections: their name, attributes, and operations. Bidirectional relationships are indicated by arrowhead-less lines. Levels of multiplicity between classes are indicated by numbers (example: one/multiple bookings vs max one customer). Class inheritance is shown by a special arrowhead (empty arrowheads).
- plus signs indicate public attribute operations
- minuses indicate private (access modifier)
- hash symbols indicates that the attribute/operation is protected
- underline shows that it is static&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="activity-diagrams"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-7"&gt;Activity Diagrams&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;describes dynamic behaviour modelling control flow between activities:
1. start node = starting point of activity
2. state object in which behaviour of object represented described
3. certain condition satisfaction decides decision node with multiple possible control laws
4. end node
Horizontal fork/join represents concurrent control laws (one in, many out). Synchronisation object would have multiple slows coming in and one/more control systems going out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deployment-diagrams"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-8"&gt;Deployment Diagrams&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;models physical deployment of software artifacts, showing hardware components, what software runs on each node, and how they are interconnected. Each node can represent a hardware/software object (connected by lines without arrowheads), act as containers to hold other node objects. Component objects represent element of software on client machine. Interfaces shown for communication between application and business layers. Dependencies between components and software artifacts (ex application layer linked to data access layer) shown using dashed line and arrowhead for direction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-case-diagram"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-9"&gt;Use Case Diagram&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;models users of system (actors), and their interaction with the system, helping to define functional requirements. Use cases are defined by oval object, described inside.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="software-architecture-patterns"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-10"&gt;Software Architecture Patterns&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are a variety of software architecture structures example:
Layered pattern architecture
''''''''''''''''''''''''''''
Or &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Multi-Tiered&lt;/span&gt; Architecture&lt;/tt&gt; is a database-driven architecture where data begins at the top layer and works its way down until it reaches the infrastructure layer, typically a database.&lt;/p&gt;
&lt;div class="section" id="event-driven-architecture"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-11"&gt;Event-driven architecture&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;sometimes programs wait till event occurs; sometimes data will need to be processed and sometimes not. Central unit (event service bus) processes data before delegating to relevant modules) — super useful in complex environments but can be difficult when error handling if modules handling same events.&lt;/p&gt;
&lt;p&gt;Apart from knowing patterns, knowing quality measures, understanding and using different tech stacks.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="programming"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-12"&gt;Programming&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Recommended books for programming knowledge:
- Experience &amp;amp; Knowledge Management in Software Engineering by Kurt Schneider.
- Clean Code by Robert C. Martin
Also, Technology Radar from thoughtworks provides categorised insight on tools, techniques, platforms, languages, frameworks.&lt;/p&gt;
&lt;div class="section" id="skills"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-13"&gt;Skills&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;understanding of web applications, cybersecurity, open source technologies&lt;/li&gt;
&lt;li&gt;experience with database platforms, analysing code for issues/errors, operations &amp;amp; DevOps skills&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-14"&gt;Documentation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Generate documentation where possible, but as much as necessary, as little as possible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="software"></category></entry><entry><title>exploring minimalism</title><link href="https://lysts.xyz/exploring-minimalism.html" rel="alternate"></link><published>2023-09-11T16:30:00+01:00</published><updated>2023-09-11T16:30:00+01:00</updated><author><name>lysts</name></author><id>tag:lysts.xyz,2023-09-11:/exploring-minimalism.html</id><summary type="html">&lt;p class="first last"&gt;an ex-hoarder's journey with practicing minimalism&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title"&gt;&lt;a class="reference internal" href="#top"&gt;Table of Contents&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#rules" id="toc-entry-1"&gt;Rules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Much of the following rules and notes are of &lt;strong&gt;The Minimalists&lt;/strong&gt; ideas.&lt;/p&gt;
&lt;p&gt;everything you own falls into &amp;quot;essentials&amp;quot;, &amp;quot;nonessentials&amp;quot;, or &amp;quot;junk&amp;quot;&lt;/p&gt;
&lt;div class="section" id="rules"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;Rules&lt;/a&gt;&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;90/90 (used last 90, will use next 90?) = “seasonality rule” covers seasons; spring = autumn&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;1 in 10 out trains letting go muscles&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;20/20 = replace item let go of for &amp;lt;£20 within 20 mins of location “Just in case rule”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;emergency items = handful of JIC items to keep: ex first-aid kit, jumper cables, water, tire chains, emergency blanket (depends on location)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;just for when = toilet paper, toothpaste&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;30/30 “wait for it” = anything costing &amp;gt;30, get by without for next 30 hrs? if &amp;gt;100, wait 30 days - assess value to life; intentional acquisition!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;don’t upgrade = electronics, don’t upgrade if you don’t need to if they break:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;go without&lt;/li&gt;
&lt;li&gt;repair it&lt;/li&gt;
&lt;li&gt;replace it&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;10/10 material possessions theory Geoffrey Miller evo psych (Sex, Evolution, &amp;amp; Consumer Behaviour)&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;list 10 most expensive possessions - anything owned last 10 yrs&lt;/li&gt;
&lt;li&gt;list top 10 most valued - can include experiences&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;see what’s in common&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;selling deadline = sunk-cost fallacy if behaviour pushes you to do things that are making you unhappy/worse, 30 days to do what you can to get rid of stuff, otherwise time more valuable ([donationtown.org](&lt;a class="reference external" href="http://donationtown.org"&gt;http://donationtown.org&lt;/a&gt;))&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;spontaneous combustion = feel good for sth to spontaneously combust?, delete! for all aspects of life&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;willing to walk = if house burning, loved ones + irreplaceable things… not forming too much attachment, don’t let happiness depend on sth you may lose&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;minimalist gifting = love is transcendent, not transactional, contribution is a love language, bottomless empathy, “presence is the best present”; experiences - more value than material gifts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;minimalist gift getting = tell people about the experiences/local places/favourite charities etc&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;—› can adjust based on your parameters&lt;/p&gt;
&lt;/div&gt;
</content><category term="lifestyle"></category><category term="lifestyle"></category><category term="minimalism"></category></entry><entry><title>this website isn't perfect</title><link href="https://lysts.xyz/problems-with-this-site.html" rel="alternate"></link><published>2023-09-09T23:08:00+01:00</published><updated>2023-09-09T23:08:00+01:00</updated><author><name>lysts</name></author><id>tag:lysts.xyz,2023-09-09:/problems-with-this-site.html</id><summary type="html">&lt;p class="first last"&gt;this website is not perfect&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Many things to fix...:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;content is ultra-scrollable horizontally (yeek), rather than fitting within the width of a mobile device.&lt;/li&gt;
&lt;li&gt;Weirdly, the footer is further away from left edge than the content itself&lt;/li&gt;
&lt;li&gt;There is still an overlap issue with the footer and content at the bottom&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Working on it!&lt;/p&gt;
&lt;p&gt;It could be interesting to explore &lt;tt class="docutils literal"&gt;elm&lt;/tt&gt; by Matthew Griffiths for more
intuitive css-specific design. Caveat.. Javascript - would bulk page:(&lt;/p&gt;
&lt;p&gt;Would also be worth running rough and black on code!&lt;/p&gt;
</content><category term="webdev"></category><category term="css"></category><category term="html"></category><category term="github"></category></entry><entry><title>newb to code... and to climbing</title><link href="https://lysts.xyz/keeping-active.html" rel="alternate"></link><published>2023-07-30T19:01:00+01:00</published><updated>2023-07-30T19:01:00+01:00</updated><author><name>lysts</name></author><id>tag:lysts.xyz,2023-07-30:/keeping-active.html</id><summary type="html">&lt;p class="first last"&gt;keeping active, challenging a new sport, how it plays into my journey
with programming&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title"&gt;&lt;a class="reference internal" href="#top"&gt;Table of Contents&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#to-be-spent-and-to-be-protected" id="toc-entry-1"&gt;To be spent and to be protected&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#mobility-habits-of-choice" id="toc-entry-2"&gt;Mobility habits of choice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#some-of-my-favourites" id="toc-entry-3"&gt;Some of my favourites!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#mobility-habits-code" id="toc-entry-4"&gt;Mobility Habits &amp;amp; Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="to-be-spent-and-to-be-protected"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;To be spent and to be protected&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Health. It's pretty easy to take good health for granted (guilty as charged)...
Getting into healthy habits takes time and we often put it off.&lt;/p&gt;
&lt;p&gt;Sometimes, it's worth a bit of sweat to feel that beautifully refreshing and invigorating euphoria after a workout or a run in the wild.
Say hello to both improved physical and mental strength! And that moment when you climb a flight of stairs and
realise that core strengthening exercises are really paying off.&lt;/p&gt;
&lt;p&gt;How much exercise is too much? How much is sustainable? How much do we actually need?
Here are my few tokens of advise for those who are in search of a new active habit:&lt;/p&gt;
&lt;div class="section" id="mobility-habits-of-choice"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;Mobility habits of choice&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;1. Yoga
This has been a constant hell yes in my repertoire.
What I love about it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;requires just a single mat, some space, and you of course&lt;/li&gt;
&lt;li&gt;take it outdoors or indoors&lt;/li&gt;
&lt;li&gt;make it solo or social&lt;/li&gt;
&lt;li&gt;plethora of moves, flows, variations&lt;/li&gt;
&lt;li&gt;decompresses, twists, challenges and relaxes the body&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is so much breadth and depth to yoga. You can identify your needs and compose your own
sequence of moves for a perfect regimen.&lt;/p&gt;
&lt;p&gt;Ease into building mind-to-muscle connections with intentional practise. A simple flow can
help you stretch and awaken muscles throughout your entire body in the mornings.
A more intense session can make you sweat, really engage your
core, build muscle anywhere you desire, and simultaneously improve your flexibility.&lt;/p&gt;
&lt;p&gt;2. Pilates
I see this as an extension of yoga, where you...:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;take those muscles and really target them&lt;/li&gt;
&lt;li&gt;core building. yes, it can burn (good burns)&lt;/li&gt;
&lt;li&gt;evokes a good sweat&lt;/li&gt;
&lt;li&gt;again, you only really need a mat, some space, and you&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- FORM is crucial in both practices so practice attentiveness to where
your limbs are placed, movements, and your posture --&gt;
&lt;p&gt;3. Running
This is more commercial so I won't delve but I suppose I'll touch on
some struggles I've had and leave some pointers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;not pacing myself properly —› start small, even if it feels easy on day 1, you have plenty of days ahead of you to push your limits&lt;/li&gt;
&lt;li&gt;long-term consistency —› timeblock in your schedule, find a friend to run with&lt;/li&gt;
&lt;li&gt;post-exercise coughing —› keep walking outside whilst you cool down (avoid sitting straight down in a badly ventilated indoor space)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Make sure you give yourself rest days! I cannot emphasize this enough. You will thank me later.&lt;/p&gt;
&lt;p&gt;4. Tennis &amp;amp; Football
- stress relieving
- satisfying to smash/kick a ball
- game element, strategy
- involves both running and staying still, mix of stillness and running&lt;/p&gt;
&lt;p&gt;I've oftentimes enjoyed such sport after a long day of work, or at the end
of the week on weekends. It can be rewarding to practice precision, the types of ways you can serve or return the ball to achieve a
pre-determined trajectory or tactic. It really works your arms and legs and
reflexiveness.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-of-my-favourites"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;Some of my favourites!&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;5. Climbing (bouldering)
So far, each time I've climbed, I've gone with an experienced climber. Each time,
I have noticed that they move with smoothness and reduced inefficient movement
and tension. It's mesmerising to watch, and I've come to appreciate the sport
as an art form.&lt;/p&gt;
&lt;p&gt;It may be one of the most challenging sports I've ever done. Don't be
deceived by the height of the walls that only seem to last a few meters...
There are varying levels of difficulty for every climber. Quick overview:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;bouldering walls have colour coded grips that belong to different paths of distinguished levels. Start hands are often labelled for you&lt;/li&gt;
&lt;li&gt;once you reach the top and final grip, both hands must meet the grip together&lt;/li&gt;
&lt;li&gt;you can use any grip from any path on the way down, or jump from a reasonable
height (don't worry, the floor is well cushioned...)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The sport gets you out of your comfort zone, testing your grip, toes, agility,
back and arms — practically everything. It requires a lot of planning and
strategy, and at times trial and error to figure out different paths.&lt;/p&gt;
&lt;p&gt;With it, your mental strength and stamina are put to the test.&lt;/p&gt;
&lt;p&gt;It can be discouraging when you can't make it to the top in one go (a &amp;quot;flash&amp;quot;).
You may feel vulnerable, &amp;quot;failing&amp;quot; in front of other observing climbers.
Whilst you're climbing, you may panic due to the sheer height, tense up, or feel like your arms are giving out.&lt;/p&gt;
&lt;p&gt;But learning that...:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;there's no time limit. Take your time solving a path, or move on to others&lt;/li&gt;
&lt;li&gt;it's okay to turn back and fall, you can always try again, today or another day&lt;/li&gt;
&lt;li&gt;other climbers are always friendly, non-judgemental, and willing to help&lt;/li&gt;
&lt;li&gt;this becomes good practice of failure, challenging and believing in yourself&lt;/li&gt;
&lt;li&gt;perseverance becomes resilience — you become less fear-ridden with time&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;has honestly led to immense self-growth in a short amount of time:):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Just yesterday, I went climbing, and felt proud of myself when I managed to clear
a route I thought I wouldn't manage. I felt stuck 80% of the way up and had to rest
about 3-4 meters above ground due to muscle fatigue.
But after giving myself a moment, I pushed myself up to the last grip. And boy,
was it undeniably satisfying.
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="mobility-habits-code"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;Mobility Habits &amp;amp; Code&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With programming, you always meet a multitude of debugging issues. Just like a grip that may
have been out of sight, you may have missed something so blatantly obvious.&lt;/p&gt;
&lt;p&gt;It may be frustrating (in my case, I end up hysterically laughing). It's
discouraging when things don't quite work. But similarly to yoga and climbing,
you make attempts, you see improvement, you reach higher and you push yourself
incrementally. The way you address problem solving may become more precise and
efficient as you unlock thought processes and improve the quality of your code.&lt;/p&gt;
&lt;p&gt;Sometimes, simple code is the best code. You don't want to overcomplicate or
overwork your muscle movements, you want them to support your objectives.
Similarly, your code should be there to help you accomplish your goals, not
diminish them.&lt;/p&gt;
&lt;p&gt;These habits have and hopefully will continue to feed in to my journey with
programming in a symbiotic manner. Timeblocking periods of exercise into my
schedule has improved my concentration and sleep quality, and diminished that
mental block to simply do things and get things done.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="notes"></category><category term="health"></category><category term="mind"></category><category term="sport"></category></entry><entry><title>introduction to algorithms</title><link href="https://lysts.xyz/intro-to-algorithms.html" rel="alternate"></link><published>2023-07-25T11:11:00+01:00</published><updated>2023-07-25T11:11:00+01:00</updated><author><name>lysts</name></author><id>tag:lysts.xyz,2023-07-25:/intro-to-algorithms.html</id><summary type="html">&lt;p class="first last"&gt;notes on recorded introductory compsci lectures (1/2) available at MIT OpenCourseWare&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title"&gt;&lt;a class="reference internal" href="#top"&gt;Table of Contents&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#algorithms-computation" id="toc-entry-1"&gt;Algorithms &amp;amp; Computation&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#what-is-a-computational-problem" id="toc-entry-2"&gt;what is a computational problem?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#provide-deterministic-algorithm-to-find-answer" id="toc-entry-3"&gt;provide deterministic algorithm to find answer...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#use-induction-recursion-to-prove-correctness-of-algorithm" id="toc-entry-4"&gt;use induction &amp;amp; recursion to prove correctness of algorithm...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#prove-efficiency" id="toc-entry-5"&gt;prove efficiency...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#define-model-of-computation" id="toc-entry-6"&gt;define model of computation...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#data-structures-dynamic-arrays" id="toc-entry-7"&gt;Data Structures &amp;amp; Dynamic Arrays&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#difference-between-interface-api-adt-vs-data-structure" id="toc-entry-8"&gt;Difference between Interface (API/ADT) vs Data Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#interfaces-2-main-ones-for-set-sequence-data" id="toc-entry-9"&gt;interfaces (2 main ones for set &amp;amp; sequence data)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#ds-approaches-2-main" id="toc-entry-10"&gt;DS approaches, 2 main&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#static-sequence-interface" id="toc-entry-11"&gt;static sequence interface:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#dynamic-sequence-interface" id="toc-entry-12"&gt;Dynamic Sequence Interface:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#linked-lists" id="toc-entry-13"&gt;linked lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#dynamic-sequence-ops" id="toc-entry-14"&gt;Dynamic Sequence Ops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#dynamic-arrays-python-lists" id="toc-entry-15"&gt;Dynamic arrays (python lists)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#amoritisation" id="toc-entry-16"&gt;Amoritisation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="algorithms-computation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;Algorithms &amp;amp; Computation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;communicating computational problem solving, its efficiency and correctness&lt;/p&gt;
&lt;div class="section" id="what-is-a-computational-problem"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;what is a computational problem?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;computational problems can have multiple correct outputs to an input
—› define a problem by specifying a predicate and observe output (binary)
—› can graph/map out&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="provide-deterministic-algorithm-to-find-answer"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;provide deterministic algorithm to find answer...&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;for general problems, algorithms can accept arbitrarily sized input, doesn't
map what a problem does. &amp;quot;Correctness&amp;quot; defined by whether output is correctly
given.&lt;/p&gt;
&lt;p&gt;f:I—›O
..
functional programming definition&lt;/p&gt;
&lt;p&gt;example: birthday problem!::
- maintain record
- check if birthday in record: - if so return pair, - add new student to record,
- return none&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-induction-recursion-to-prove-correctness-of-algorithm"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;use induction &amp;amp; recursion to prove correctness of algorithm...&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;inductive hypothesis = &amp;quot;if first &lt;tt class="docutils literal"&gt;k&lt;/tt&gt; students contain match, algorithm returns
match before interviewing student &lt;tt class="docutils literal"&gt;k+1&lt;/tt&gt;&amp;quot; = predicate
&lt;tt class="docutils literal"&gt;k&lt;/tt&gt; increases up to &lt;tt class="docutils literal"&gt;n&lt;/tt&gt;
base case: &lt;tt class="docutils literal"&gt;k=0&lt;/tt&gt; (case holds!)
assume IH true for &lt;tt class="docutils literal"&gt;k=k&lt;/tt&gt;'{- if k' contains match —› alreated returned by
induction, - else if &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;k'+1&lt;/span&gt;&lt;/tt&gt; contains match, alg &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;k'+1&lt;/span&gt;&lt;/tt&gt; against all students}&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="prove-efficiency"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-5"&gt;prove efficiency...&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;dont measure time, instead count fundamental operations (ops), expect performance to depend on (with respect to) size of our input (n) = how well algorithm performs, not how well it's implemented
O(.) upper bound, omega (.) lower bounds (theta) corresponds to both
asymptotic analysis***&lt;/p&gt;
&lt;p&gt;common algorithms that relate algorithm running time to input size
linear time algorithm efficiency from top to bottom
'''''''''''''''''''''''''''''''''''''''''''''''''''&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;(theta)1 = constant time&lt;/li&gt;
&lt;li&gt;()lg n= logarithmic time&lt;/li&gt;
&lt;li&gt;()n = linear&lt;/li&gt;
&lt;li&gt;()n lg n= log n&lt;/li&gt;
&lt;li&gt;()n^2 = quadratic&lt;/li&gt;
&lt;li&gt;()n^c = polynomial (c for constant)&lt;/li&gt;
&lt;li&gt;2^(theta)n = exponential time, bad bc if plotted as function of n&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="processing time vs input size" src="images/processingtime.png" style="width: 600px;" /&gt;
&lt;p&gt;—&amp;gt; dnt want shit to go too high. exponential crap!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="define-model-of-computation"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-6"&gt;define model of computation...&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;word-RAM (RAM = random access memory, in constant time)
memory (string of bits), CPU where byte (chunk of bits = word) ex 64 bit
machine, to operate on to spit back, addressable memory 20 exabytes!! (data grabbed, registered separately, output also then registered then spat out)
ex can do integer arithmetic, logical ops (boolean etc), bitewise ops, on CPU memory&lt;/p&gt;
&lt;p&gt;if you want to operate on non-constant n, linear amount of data, how long will it take?
concerns data structures, store large amount of data and operate on that&lt;/p&gt;
&lt;img alt="algorithm list for solving computational problems" src="images/summaryL1.png" style="width: 600px;" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="data-structures-dynamic-arrays"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-7"&gt;Data Structures &amp;amp; Dynamic Arrays&lt;/a&gt;&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;sequence interface &amp;amp; data structures&lt;/li&gt;
&lt;li&gt;linked lists, dynamic arrays, amortication&lt;/li&gt;
&lt;li&gt;set interface&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="difference-between-interface-api-adt-vs-data-structure"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-8"&gt;Difference between Interface (API/ADT) vs Data Structure&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;specification, what data you can store [problem] vs representation, how to store data [algorithmic solution]
interface where you specify what operations are supported, what they mean vs
data structure defines algorithms to support operations&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="interfaces-2-main-ones-for-set-sequence-data"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-9"&gt;interfaces (2 main ones for set &amp;amp; sequence data)&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;set&lt;/li&gt;
&lt;li&gt;sequence&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ds-approaches-2-main"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-10"&gt;DS approaches, 2 main&lt;/a&gt;&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;arrays&lt;/li&gt;
&lt;li&gt;pointer based&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="defining-sequence-interfaces"&gt;
&lt;h4&gt;[defining sequence interfaces]&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="static-sequence-interface"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-11"&gt;static sequence interface:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;items x0, x1, ... xn-1
build(x): make new ds for items in x (x being an iterable in py, in this seq)
len(): return n (length, OO)
iter_seq(): output x0, x1...,xn-1 in seq order
get_at(i): return xi (index i)
set_at(i,x): return xi to x
get_first/last()
set_first/last()&lt;/p&gt;
&lt;p&gt;array/list
x1 = array.get_at(1) - method
get_at(array, 1) - function&lt;/p&gt;
&lt;p&gt;array.set_at(1, x1) (mutating set inside array)&lt;/p&gt;
&lt;p&gt;not so great (breaks api purpose):
o = object()
o.attr = 1 - setter
attr = o.attr - getter&lt;/p&gt;
&lt;p&gt;Natural solution for this problem: static array (only dynamic arrays in python) with optimal running times
key = word RAM model of computation
- memory = array of w-bit words [....|!....|....|!....]
- &amp;quot;array&amp;quot; = consecutive chunk of memory (starts at ! to !, includes two words, 0, 1)
—› array[i] = memory[address(array)+i] = can access memory in constant
time (assumed), get_at &amp;amp; set_at
—› array access is O(I)??????? = constant time
side effect of this assumption^ —› must assume w is at least lgn (currently w = 64, 256, must grow at least as fast as n, log n to account for n words in RAM,
&lt;em&gt;we care about scalability for v large n in algorithms, want to know what growth function is and ignore lead constant factor, asymptotic notation! - hashing, in next chapter)&lt;/em&gt;
O(I) per get_at/set_at/len
O(n) per build/iter_seq - linear time
memory allocation model: allocate array of size n in theta(n) time
.. can imagine this being constant time but doesn't matter?, if you allocate some chunk of memory you hv no idea if it's initialised, initialising that array to 0s will cost linear time (?)
—› side effect of this model; space used = time used (space=O(time)), assumed
it costs allocate memory&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dynamic-sequence-interface"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-12"&gt;Dynamic Sequence Interface:&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;static sequence PLUS:
insert_at(i,x): make x the new xi, shifting xi —› xi+1 —› xi+2 —›...—›xn-1 —›
xn'-1 (n'=n+1)&lt;/p&gt;
&lt;img alt="insert_at(i,x) op" src="images/insert_atstatic.png" style="width: 600px;" /&gt;
&lt;p&gt;delete_at(i): shift xi&amp;lt;-xi+1&amp;lt;—...&amp;lt;—xn'-1 (n'=n-1) &amp;lt;—xn-1
insert/delete_first/last(x)/() - adding in front, or to tail of array [][-----][]&lt;/p&gt;
&lt;div class="section" id="solving-sequence-interfaces"&gt;
&lt;h4&gt;[solving sequence interfaces]&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="linked-lists"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-13"&gt;linked lists&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;= store items in nodes, each node has an item in it (actual values, x0 --- xn-1) and a next field, next pointers link items all together, in this order. data structure represented by head of list, and len.
relying on pointers being stored as single word (can dereference and see what
value is at end of each pointer (pointers are indices in giant array, address
of array, tells us where in memory pointed value is) in constant time in word RAM model) - here we
have arrays of size 2, possibly in arbitrary order in RAM model&lt;/p&gt;
&lt;img alt="insert op in linked list" src="images/insertfirstonlinked.png" style="width: 600px;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="dynamic-sequence-ops"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-14"&gt;Dynamic Sequence Ops&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;on a static array:&lt;/em&gt;
if you insert/delete = at() costs theta(n) time (first, all items must shift, to maintain A[i] = xi - must copy
over) costs bc
1. shifting (not part of delete in array, but shifting in MEMORY n, size is constant! therefore new array would not be continguous to new one)
2. allocate new array (not allows to change size of static array) - must copy
over to new array to throw away old one, thus bad for dynamic ops - that's why bad&lt;/p&gt;
&lt;p&gt;&lt;em&gt;on a linked list:&lt;/em&gt;
can efficiently insert_first(x), where you create node, get it to point to 0
node, get head to point to new first node.
insert/delete_first(): O(O) time
BUT everything else slow:
to get/set_at need theta(i) time (in worst case, theta(n)) = must walk to that
position by following every pointer (even w insert/delete_at(i) tho better at being dynamic
easier way to get last item, is to have tail pointer to last list (= data pointer
augmentation BUT must keep this up to date all the time)&lt;/p&gt;
&lt;p&gt;—› arrays good if random access and nothing dynamic
—› linked list great if working on ends even dynamically&lt;/p&gt;
&lt;p&gt;NEXT
Try to get good running times of static arrays and linked lists...
.. how is python implemented relates to overall message of L1/2, automatically creates dynamic arrays, called lists&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dynamic-arrays-python-lists"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-15"&gt;Dynamic arrays (python lists)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;in py interpreter...
- relax constraint that size(array) = n —› # items in seq, &amp;quot;roughly n&amp;quot; in
algorithm context, &amp;quot;can mean you throw away constant factors&amp;quot; ???
- enforce size = theta(n) (at least n and at most some constant times n &amp;amp; &amp;gt;= n
- maintain that A[i] = ni (that ith item of array represents xi)
—› array with some empty nodes at end
what do you do if insert_last(x)?
1. A[len] = x
2. increment length (len+=1)
.. how do you know you have enough room? you don't, incorrect algorithm if len = size = n
—› track length &amp;amp; size, size = full len array, len = just the portion that has designated values
3. insert_last(x): add to end unless n = size (representation size)&lt;/p&gt;
&lt;p&gt;with flexibility of not having to allocate/copy every single time,
if n = size:
- allocate new array of constant factor larger ex 1.1, 2, 5 etc * size OR ex
size + 5 (trolling answer, the latter is bad bc you have to resize
frequently, 5 steps later - linear step)
n insert_last() from empty array
- resize at n=1, 2, 4, 8, 16...
—› resize cost = theta(1+2+4+8+16+...+n) = theta((logn)sum(i=n) of 2^i) = geometric series (ith bit = 1) = theta(2^lgn) = theta(n), takes linear time
geometric series dominated by last term (grows exponentially)&lt;/p&gt;
&lt;img alt="resize cost summation" src="images/resizecostdynamic.png" style="width: 600px;" /&gt;
&lt;p&gt;—› constant O(i) amortised&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="amoritisation"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-16"&gt;Amoritisation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;operation takes T(n) amortised time
if any k ops take =&amp;lt; k*T(n) time
(averaging over ops sequence)&lt;/p&gt;
&lt;img alt="summary table of seq interface &amp;amp; data structure time costs" src="images/summaryL2.png" style="width: 600px;" /&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="code"></category><category term="algorithms"></category><category term="compsci"></category></entry><entry><title>my current set-up, for a reductive workflow</title><link href="https://lysts.xyz/terminal-centric-setup.html" rel="alternate"></link><published>2023-07-11T18:06:00+01:00</published><updated>2023-07-11T18:06:00+01:00</updated><author><name>lysts</name></author><id>tag:lysts.xyz,2023-07-11:/terminal-centric-setup.html</id><summary type="html">&lt;p class="first last"&gt;tools revolving around terminal for reductive workflow&lt;/p&gt;
</summary><content type="html">&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title"&gt;&lt;a class="reference internal" href="#top"&gt;Table of Contents&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#iterm2-my-cli" id="toc-entry-1"&gt;iTerm2, my CLI&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="reference internal" href="#more-key-software" id="toc-entry-2"&gt;More Key Software&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#vim-my-text-editor" id="toc-entry-3"&gt;vim, my text-editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#ranger-my-file-navigator" id="toc-entry-4"&gt;ranger, my file navigator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#extra-tip" id="toc-entry-5"&gt;extra tip!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Tools I use and how I've configured them to provide simplicity to my reductive
workflow.&lt;/p&gt;
&lt;div class="section" id="iterm2-my-cli"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;iTerm2, my CLI&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;CLIs&lt;/strong&gt; (command-line interfaces) allow users to give text-based inputs (command lines) to interact with a computer's
operating system and perform operations or automate processes.&lt;/p&gt;
&lt;p&gt;With a simple command such as &lt;tt class="docutils literal"&gt;mkdir (filename)&lt;/tt&gt;, you're able to create
files (example: &lt;tt class="docutils literal"&gt;mkdir&lt;/tt&gt;), rather than clicking through folders
with your cursor with a &lt;strong&gt;GUI&lt;/strong&gt; (graphical user interface).&lt;/p&gt;
&lt;p&gt;As a macOS user, I constantly search for tools that can bring me more
customisability (Apple is famous for being stubbornly unsupportive that kind of self-autonomy).&lt;/p&gt;
&lt;p&gt;Inevitably, I tried the pre-installed &lt;tt class="docutils literal"&gt;Mac Terminal&lt;/tt&gt;. To no surprise, the lackness of
helpful features became a hindrance — there was just zero flow. I had to utilise &lt;tt class="docutils literal"&gt;tmux&lt;/tt&gt;,
an open-source terminal multiplexer that allows you to acces multiple sessions in a single window.&lt;/p&gt;
&lt;p&gt;I then stumbled across &lt;tt class="docutils literal"&gt;iTerm2&lt;/tt&gt;, a terminal emulator for macOS, and &lt;em&gt;oh boy&lt;/em&gt;!
* It is highly customisable, beyond themes and formatting. I personally enjoy
the &lt;em&gt;Zenbones Dark&lt;/em&gt; theme:)
* Robust support for a multitude of third-party plugins and extensions, which I will detail later.
* Even without plugins, it allows you to divide the windows horizontally or
vertically with &lt;tt class="docutils literal"&gt;^+cmd+D&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;cmd+D&lt;/tt&gt;, and can toggle any pane to full screen and
back with &lt;tt class="docutils literal"&gt;^+cmd+enter&lt;/tt&gt;. To move between panes, &lt;tt class="docutils literal"&gt;alt+cmd&lt;/tt&gt; and arrowkeys.
Moving between tabs require &lt;tt class="docutils literal"&gt;cmd&lt;/tt&gt; and 1, 2, or 9. Similarly, moving through
windows require &lt;tt class="docutils literal"&gt;atl+cmd&lt;/tt&gt; and the same numbers.
* As such, there are a multitude of useful key bindings such as &lt;tt class="docutils literal"&gt;cmd+F&lt;/tt&gt; like
on browser! They are easily accessed via &lt;em&gt;Preferences &amp;gt; Keys &amp;gt; Key Bindings&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I use &lt;tt class="docutils literal"&gt;zsh&lt;/tt&gt; (Z shell) and &lt;tt class="docutils literal"&gt;Bash&lt;/tt&gt; (Bourne Again Shell) as my command-line shells.
I, however, avoid &lt;tt class="docutils literal"&gt;Oh My Zsh&lt;/tt&gt;, a popular framework used with &lt;tt class="docutils literal"&gt;zsh&lt;/tt&gt; for a number of reasons:
1. my philosophy is to figure out what I need and to use it
well vs installing things that I need to understand when I may or may not use it
2. it takes up a LOT of space.
Which brings me to the next section, where I detail how I manage my additional software, plugins, and text-editors...&lt;/p&gt;
&lt;div class="section" id="more-key-software"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;More Key Software&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="vim-my-text-editor"&gt;
&lt;span id="vim"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;vim, my text-editor&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;Vim&lt;/tt&gt; (Vi IMproved) is a lifesaving screen-based text editor program —&amp;nbsp;free and open-source as
usual. Built-in tutorial, &lt;tt class="docutils literal"&gt;vimtutor&lt;/tt&gt; helps you pick up all the key bindings
and shortcuts that allow you to edit code at lightning speed. It goes beyond
editing, it also allows navigation between different files, and &lt;tt class="docutils literal"&gt;:help&lt;/tt&gt; is
always available for when you forget. See vim modes for more usage deets!&lt;/p&gt;
&lt;p&gt;For example, to copy/paste in different instances of vim, &lt;tt class="docutils literal"&gt;&amp;quot;+y&lt;/tt&gt; yanks to the
system clipboard rather than the vim clipboard, which is done simply by &lt;tt class="docutils literal"&gt;y&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;There is a native third-party package loading system that has been implemented
with vim, which I prefer rather than using &lt;tt class="docutils literal"&gt;Pathogen&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;vundle&lt;/tt&gt; or other popular Vim
plugin managers. Packages are recognised under &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.vim/pack&lt;/span&gt;&lt;/tt&gt; and can be downloaded separately
and unpacked in its own directory, making package/plugin additions, removals, and updates easy.&lt;/p&gt;
&lt;p&gt;Plugins under &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.vim/pack/*/start/{name}&lt;/span&gt;&lt;/tt&gt; are autoloaded on startup, and
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.vim/pack/*/opt/{name}&lt;/span&gt;&lt;/tt&gt; are loaded manuanlly with &lt;tt class="docutils literal"&gt;:packadd {name}&lt;/tt&gt;. I
use the &lt;tt class="docutils literal"&gt;start&lt;/tt&gt; folder only, and separate my plugins into &lt;strong&gt;ftplugin&lt;/strong&gt; for plugins specific
to programming languages and &lt;strong&gt;plugin&lt;/strong&gt; for &lt;tt class="docutils literal"&gt;.vimrc&lt;/tt&gt; configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ranger-my-file-navigator"&gt;
&lt;span id="ranger"&gt;&lt;/span&gt;&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;ranger, my file navigator&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sometimes, you miss being able to see all of your files at a glance, and the
hierarchy they reside in. This is where &lt;tt class="docutils literal"&gt;Ranger&lt;/tt&gt; comes in, a terminal-based
file manager application that allows users to browse and navigate with a dual-pane layout for
file management, with a directory tree view, allowing file previews, operations (copy, move, delete).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="extra-tip"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-5"&gt;extra tip!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;type &lt;tt class="docutils literal"&gt;tree&lt;/tt&gt; and see what you get;)&lt;/p&gt;
&lt;/div&gt;
</content><category term="compsci, workflow"></category><category term="compsci"></category><category term="terminal"></category><category term="vim"></category><category term="ranger"></category></entry><entry><title>setting up github actions for pelican</title><link href="https://lysts.xyz/github-actions-pelican.html" rel="alternate"></link><published>2023-07-08T11:00:00+01:00</published><updated>2023-07-08T11:00:00+01:00</updated><author><name>lysts</name></author><id>tag:lysts.xyz,2023-07-08:/github-actions-pelican.html</id><summary type="html">&lt;p class="first last"&gt;web-building with github actions and pelican&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The first attempt was to try and make a yml file to do github actions.&lt;/p&gt;
</content><category term="notes"></category><category term="github"></category></entry><entry><title>building this website — a series of firsts</title><link href="https://lysts.xyz/building-this-website.html" rel="alternate"></link><published>2023-06-30T04:58:00+01:00</published><updated>2023-06-30T04:58:00+01:00</updated><author><name>lysts</name></author><id>tag:lysts.xyz,2023-06-30:/building-this-website.html</id><summary type="html">&lt;p class="first last"&gt;web-building with pelican, css, and html&lt;/p&gt;
</summary><content type="html">&lt;p&gt;This is my first webdev project.&lt;/p&gt;
&lt;div class="contents topic" id="table-of-contents"&gt;
&lt;p class="topic-title"&gt;&lt;a class="reference internal" href="#top"&gt;Table of Contents&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#birthing-this-love-child" id="toc-entry-1"&gt;birthing this love child&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#setting-up-my-reductive-workflow" id="toc-entry-2"&gt;setting up my reductive workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="birthing-this-love-child"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;birthing this love child&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After galavanting across webrings, bookmarked websites, and premade jekyll themes, I decided to prioritise the following in regards to the creation of this website:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;incredibly minimal, but not devoid of life or personality.&lt;/li&gt;
&lt;li&gt;create from scratch.&lt;/li&gt;
&lt;li&gt;easy content building &amp;amp; publishing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In part due to my disatisfaciton with existing templates, I took inspiration from basic &amp;quot;no-theme&amp;quot; themes and the classic terminal-like feel, hence the backslashes, monospace font, and some format- and favicon-dependent &amp;quot;personal-branding&amp;quot;.&lt;/p&gt;
&lt;p&gt;But before I was able to address such goals, I was met with a number of challenges:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;beyond foetal with anything webdev (how websites work, css &amp;amp; html syntax, etc..)&lt;/li&gt;
&lt;li&gt;a learning curve = a need for time-efficiency&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My journey kickstarted with the purchase of a domain name which I then linked to a GitHub Pages repo to set up my first foundational html and css files. Learning approrpiate syntax consisted of simultaneously relying on documentation guidlines and &lt;tt class="docutils literal"&gt;view page source&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;inspect&lt;/tt&gt; browser tools to pinpoint features that intrigued me and practice tweak existing code to get a feel of what I wanted to add to my tabula rasa. These tools came in handy later down the road, on my own website, when testing different formats to achieve my desired layout or identifying any errors in css selections.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setting-up-my-reductive-workflow"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;setting up my reductive workflow&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Half my time was spent understanding the workings of web-hosting and setting up a static site generator with some personal customisations. I chose to install &lt;tt class="docutils literal"&gt;Pelican&lt;/tt&gt;, despite the popularity of Jekyll (which GitHub Actions also uses by default). I fancied the idea of fast rebuild times and easily accessible web-hosting, being able to easily implement my original html and css attempts, and having the freedom to publish articles in other languages.&lt;/p&gt;
&lt;p&gt;Thankfully, such features were readily available with Pelican. Upon stripping default files and scripts from its working pathway, I better understood the dependencies and configuration settings required to ensure the compatibility of my original files with engine. I learned of the ease and elegance of Pelican in executing test runs of my scripts from terminal, after tediously git committing small changes via GitHub Pages and developing an addiction to the slow emergence of green ticks when repeatedly abusing GitHub Actions. reat blog-style content in a high-level file format such as &lt;tt class="docutils literal"&gt;ReStructuredText&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;If you're also picking up &lt;tt class="docutils literal"&gt;html&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;css&lt;/tt&gt; for the first time, setting up an open source static site generator like Pelican in your terminal will help you create a development server in your local browser to swiftly see immediate changes within seconds. This immensely accelerated my on-the-go learning.&lt;/p&gt;
&lt;p&gt;I'm currently working on automatically deploying my Pelican-based webdev project to GitHub Pages with GitHub Actions.&lt;/p&gt;
&lt;/div&gt;
</content><category term="webdev"></category><category term="css"></category><category term="html"></category><category term="github"></category></entry></feed>